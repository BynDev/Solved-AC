#include <iostream>
#include <vector>
#include <stack>
using namespace std;




int main() {
    int N; cin >> N;
    vector<vector<int>>matrix(N, vector<int>(N, 0));
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            cin >> matrix[i][j];
        }
    }

    vector<vector<vector<long long>>> DP(N, vector<vector<long long>>(N, vector<long long>(3, 0)));
    // 0 - 가로 1 - 세로 2 - 대각선
    
    DP[0][1][0] = 1;

    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            if (matrix[i][j] == 1)
            {
                continue;
            }
            if (i == 0 && j == 0)
            {
                continue;
            }

            if (i != 0 && j != 0)
            {
                if (DP[i][j-1][0] >= 1 || DP[i][j-1][2] >= 1)
                {
                    DP[i][j][0] += DP[i][j-1][0] + DP[i][j-1][2];
                }

                if (DP[i-1][j][1] >= 1 || DP[i-1][j][2] >= 1)
                {
                    DP[i][j][1] += DP[i-1][j][1] + DP[i-1][j][2];
                }

                if (DP[i-1][j-1][0] >= 1 || DP[i-1][j-1][1] >= 1 || DP[i-1][j-1][2] >= 1)
                {
                    if (matrix[i-1][j] != 1 && matrix[i][j-1] != 1)
                    {
                        for (int k = 0; k < 3; k++)
                        {
                            DP[i][j][2] += DP[i-1][j-1][k];
                        }
                    }
                }
            }
            else
            {
                if (i == 0)
                {
                    if (DP[i][j-1][0] >= 1)
                    {
                        DP[i][j][0] += DP[i][j-1][0];
                    }
                }
                if (j == 0)
                {
                    if (DP[i-1][j][1] >= 1)
                    {
                        DP[i][j][1] += DP[i-1][j][1];
                    }
                }
            }
        }
    }
    cout << DP[N-1][N-1][0] + DP[N-1][N-1][1] + DP[N-1][N-1][2] << endl;
}